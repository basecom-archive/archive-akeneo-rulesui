{% form_theme form 'BasecomRulesEngine::form_themes.html.twig' %}
{% block content %}
    {% import 'PimUIBundle:Default:page_elements.html.twig' as elements %}
    {% import 'BasecomRulesEngine::macros.html.twig' as bscElements %}
    <div class="AknDefault-mainContent basecom-rule">
        {% set action = path('basecom_rule_create') %}
        {% if ruleDefinition.id is not null %}
            {% set action = path('basecom_rule_edit', {id: ruleDefinition.id}) %}
        {% endif %}
        {% if ruleDefinition.id is defined and ruleDefinition.id is not null %}
            {% set action = path('basecom_rule_edit', {'id': ruleDefinition.id}) %}
        {% endif %}
        {{ form_start(form, {
            'action': action,
            'attr': {
                'data-updated-title': 'confirmation.leave'|trans,
                'data-updated-message': 'confirmation.discard changes'|trans({ '%entity%': 'family.title'|trans })
            }
        }) }}
        {% set buttons %}
            {{ bscElements.createBtn('basecom-logo', null, {'id' : 'basecom-logo'}) }}
            {% if ruleDefinition.id is defined and ruleDefinition.id is not null %}
                {{ elements.deleteLink(
                path('pimee_catalog_rule_rule_delete', { id: ruleDefinition.id }),
                'pim_enrich_attribute_remove',
                path('pimee_catalog_rule_rule_index'),
                'confirmation.remove.item'|trans({ '%name%': form.vars.name }),
                'basecom.flash.rule.removed'|trans,
                null,
                'AknButton AknButton--important'
                ) }}
            {% endif %}
            {{ elements.submitBtn('', 'ok') }}
        {% endset %}

        {% if ruleDefinition.id is defined and ruleDefinition.id is not null %}
            {{ elements.page_header({'title': 'basecom.rules_engine.edit'|trans, 'buttons': buttons}) }}
        {% else %}
            {{ elements.page_header({'title': 'basecom.rules_engine.menu_entry'|trans, 'buttons': buttons}) }}
        {% endif %}

        <div class="AknTabContainer-content" id="pim_enrich-channel-tab-property">

            {% for formError in form.vars.errors %}
                <div class="AknFlash AknFlash-FormError AknFlash--error">
                    {{ formError.message }}
                </div>
            {% endfor %}

            {{ form_row(form.code) }}
            {{ form_row(form.priority) }}
            {{ form_row(form.type) }}
            <div class="AknColumnConfigurator">
                <div class="AknColumnConfigurator-column">
                    {{ form_row(form.conditions) }}
                </div>
                <div class="AknColumnConfigurator-column">
                    {{ form_row(form.actions) }}
                </div>
            </div>
        </div>
        {{ form_end(form) }}
    </div>
{% endblock %}
{% set messages = [] %}
{% for type,items in app.session.flashbag.all %}
    {% set typeMessages = [] %}
    {% for index,item in items %}
        {% set typeMessages = typeMessages|merge({ (index): item|trans }) %}
    {% endfor %}
    {% set messages = messages|merge({ (type): typeMessages }) %}
{% endfor %}
<script nonce="e6baa04a331595aa563b2777cb83bfc48e9157aa">window.flashMessages = JSON.parse('{{ messages|json_encode()|raw }}');</script>
<script type="text/javascript" nonce="e6baa04a331595aa563b2777cb83bfc48e9157aa">
    require(
        [
            'jquery',
            'bsc-rules/editview',
            'pim/common/breadcrumbs',
            'pim/fetcher-registry'
        ],
        function ($, EditView, Breadcrumbs, FetcherRegistry) {
            $(function () {
                var breadcrumbs = new Breadcrumbs({
                    config: {
                        tab:  'pim-menu-settings',
                        item: 'pim-menu-enrich-rule'
                    }
                });

                breadcrumbs.configure();
                FetcherRegistry.initialize();

                breadcrumbs.configure().then(function () {
                    breadcrumbs.render();
                    $('*[data-drop-zone="breadcrumbs"]').append(breadcrumbs.$el);
                });

                new EditView({{ attributesData | json_encode | raw }});
            });
        }
    );
</script>
